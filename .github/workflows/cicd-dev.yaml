name: CI/CD Pipeline for Dev Environment-first

on:
  workflow_dispatch:
   
# on:
#   pull_request: # Trigger the pipeline on pull requests to the dev branch
#     branches:
#       - dev
#     types:
#       - opened   # Trigger the pipeline when a new pull request is opened, edited, or updated
#       - edited
#       - synchronized  
#     paths:
#       - "**"    # Trigger the pipeline when any file in the repository is changed

permissions:
  contents: read                                                                      # Minimum required for accessing repository content
  actions: write                                                                      # Example: Allow writing to GitHub Actions


jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test Node.js App                                                    # Build and test the Node.js app for JII
    environment: Dev                                                                    # Set the environment to Dev
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js                                                            # Set up Node.js version 18 for the app
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies & Check for Errors                                   # Install dependencies and check for errors
        run: |
          echo "Installing dependencies..."
          cd app
          npm install
          if [ $? -ne 0 ]; then
            echo "Dependency installation failed! Halting pipeline."
            exit 1
          fi

      - name: Run Tests & Check for Errors                                               # Run tests and check for errors in the app
        run: |
          echo "Running tests for the app..."
          cd app
          npm test
          if [ $? -ne 0 ]; then
            echo "Tests failed! Halting pipeline."
            exit 1
          fi

  # Job 2: Build and Push Docker Image                                                    # Build and push the Docker image to Docker Hub       
  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: Dev                                                                      # Set the environment to Dev
    name: Build and Push Docker Image
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}                                         # Use the Docker Hub username/pass from GitHub Secrets 
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image                                                           # Build the Docker image for the app and check for errors                           
        run: |
          echo "Building Docker image..."
          BUILD_ID=${{ github.run_id }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-jii-app:$BUILD_ID -t ${{ secrets.DOCKER_USERNAME }}/node-jii-app:latest -f app/Dockerfile app
          if [ $? -ne 0 ]; then
            echo "Docker build failed! Halting pipeline."
            exit 1
          fi

      - name: Push Docker Image                                                             # Push the Docker image to Docker Hub and check for errors                      
        run: |
          echo "Pushing Docker image to Docker Hub..."
          BUILD_ID=${{ github.run_id }}
          docker push ${{ secrets.DOCKER_USERNAME }}/node-jii-app:$BUILD_ID
          docker push ${{ secrets.DOCKER_USERNAME }}/node-jii-app:latest
          if [ $? -ne 0 ]; then
            echo "Docker push failed! Halting pipeline."
            exit 1
          fi

      - name: Pass Docker Image Tag to Artifact                                              # Pass the Docker image tag to the next job as an artifact
        run: echo "${{ secrets.DOCKER_USERNAME }}/node-jii-app:latest" > docker-image-tag.txt

      - name: Upload Docker Image Tag as Artifact                                            # Upload the Docker image tag as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-tag-${{ github.run_id }}                                         # Name the artifact with run ID for uniqueness
          path: docker-image-tag.txt

  # Job 3: Terraform Plan and Apply
  terraform:
    needs: docker-build-push
    runs-on: ubuntu-latest
    environment: Dev
    name: Terraform Infrastructure Management
    defaults:
      run:
        shell: bash
        working-directory: ./terraform                                                         # Specify the Terraform directory
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform                                                                 # Set up Terraform with the specified version for consistency
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Download docker-image-tag Artifact                                               # Download the Docker image tag artifact from the previous job
        uses: actions/download-artifact@v4
        with:
          name: docker-image-tag-${{ github.run_id }}
      
      - name: Set Docker Image Variable from Artifact                                          # Set the Docker image environment variable from the artifact                    
        run: |
          echo "Setting Docker image environment variable..."
          DOCKER_IMAGE=$(cat ../docker-image-tag.txt)
          echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV

      - name: Initialize Terraform                                                              # Initialize Terraform with the given backend configuration
        run: |
          echo "Initializing Terraform in the ./terraform directory..."
          terraform init -backend-config="./backend-config/dev-backend.conf"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}                                   # Use AWS credentials from GitHub Secrets
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Format Terraform Files                                                            # Format Terraform files for consistency                   
        run: terraform fmt -recursive

      - name: Terraform format check                                                            # Check Terraform formatting                  
        id: fmt
        run: terraform fmt -check
    
      - name: Terraform validate                                                                # Validate Terraform configuration                 
        id: validate
        run: terraform validate

      - name: Plan Terraform Changes                                                            # Generate Terraform plan with the Docker image variable and environment variable
        run: |
          echo "Generating Terraform plan...(DEV)"
          terraform plan -var "docker_image=${{ env.DOCKER_IMAGE }}" -var "environment=Dev" -out=plan-dev-${{ github.run_id }}.tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
      - name: Upload Terraform Plan                                                               # Upload the Terraform plan as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-dev-${{ github.run_id }}
          path: terraform/plan-dev-${{ github.run_id }}.tfplan

      - name: Check Docker Image var in Terraform Job                                             # Check the Docker image variable in the Terraform job
        run: |
          echo "Docker Image in Terraform job contains: "
          echo "${{ env.DOCKER_IMAGE }}"
    
      - name: Apply Terraform Changes                                                             # Apply the Terraform plan to create/update the infrastructure in the Dev environment                        
        run: terraform apply -var "docker_image=${{ env.DOCKER_IMAGE }}" -var "environment=Dev" -auto-approve plan-dev-${{ github.run_id }}.tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
